/** \page tcl_part The part command
    	\verbatim part <particle_number> ( pos|type|q|v|f|quat|omega|torque|[un]fix <x> <y> <z> |ext_force|bond| [delete] <value>+ )* \endverbatim
	modifies particle data, namely position, type (monomer, ion, ...),
		    charge, velocity, force and bonds. 
	Multiple properties can be changed at once. If you add a new
        particle the position has to be set first because of the spatial
        decomposition. <BR>
	Syntax for the different properties:
	<ul>
	<li> \verbatim pos <x value> <y value> <z value> \endverbatim
	<li> \verbatim type <particle_type_number> \endverbatim
	Restrictions: \<particle_type_number\> >= 0.<BR>
	The \<particle_type_number\> is used in \ref tcl_inter to define the
        parameters of the non bonded interactions between different kinds
        of particles.
	<li> \verbatim q <charge> \endverbatim
	<li> \verbatim v <x value> <y value> <z value> \endverbatim
	<li> \verbatim f <x value> <y value> <z value> \endverbatim
	If flag ROTATION is set in config.h \ref config.h, particle properties such as
	quat, omega, and torque can be used:
	<li> \verbatim quat <q1> <q2> <q3> <q4> \endverbatim
	<li> \verbatim omega <x value> <y value> <z value> \endverbatim
	<li> \verbatim torque <x value> <y value> <z value> \endverbatim
	Fixes the particle in space (Needs compile flag EXTERNAL_FORCES in config.h \ref config.h).
	<li> \verbatim fix <x> <y> <z> \endverbatim
	Fixes the particle in space. By supplying a set of 3 integers
	as arguments it is possible to fix motion in \a x, \a y , or \a z coordinates
	independently.  For example <tt> fix 0 0 1 </tt> will fix
	motion only in z.  Note that <tt> fix </tt> without
	arguments is equivalent to <tt> fix 1 1 1 </tt> (Needs
	compile flag EXTERNAL_FORCES in \ref config.h config.h).
        <li> \verbatim ext_force <x value> <y value> <z value> \endverbatim
	An additional exxternal force is applied to the particle
	(Needs compile flag EXTERNAL_FORCES in \ref config.h config.h).
        <li> \verbatim unfix \endverbatim
	Release any external influence from the particle 
	(Needs compile flag EXTERNAL_FORCES in \ref config.h config.h).
	<li> \verbatim bond <bond_type_number> <partner>+ \endverbatim
	Restrictions: \<bond_type_number\> \>= 0; partner must be an existing particle.<BR>
	The \<bond_type_number\> is used for \ref tcl_inter to define bonded interactions.
	<li> \verbatim bond delete <bond_type_number> <partner>+ \endverbatim
	Searches for the given bond and deletes it.
	<li> \verbatim bond delete\endverbatim
	will delete all bonds attached to this particle.
	</ul>

	\anchor tcl_part_delete
	If instead of a property "delete" is given, the particle is deleted and all
	bonds referencing it.
        \anchor tcl_part_print
        If instead of a property "print" is given,
	\verbatim part <particle_number> print (id|pos|type|q|v|f|fix|ext_force|bond)* \endverbatim
	writes out the given properties in a simple list form like
        \verbatim 40 8.849 1.8172 1.4677 1.0 {} \endverbatim
	generated by
	\verbatim part 40 print id pos q bonds\endverbatim
	This routine is primarily meant for effective use in Tcl scripts
	(see e. g. \ref tcl_blockfile_write_particles).<BR>
	If no property is given, 
	\verbatim part <particle_number> \endverbatim 
	returns all properties of the particle, if it exists, in the form
	\verbatim 0 pos 2.1 6.4 3.1 type 0 q -1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... } \endverbatim
	which may be used as an input to this function later on. The first integer is the
	particle number. <BR>
	\verbatim part deleteall \endverbatim
	deletes <i>all</i> particles currently present in the simulation.<BR>
	Without any parameters at all,
	\verbatim part \endverbatim
	returns the properties of <i>all</i> stored particles in a 
	tcl-list with the same format as specified above:
	\verbatim {0 pos 2.1 6.4 3.1 type 0 q -1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... }} 
 {1 pos 1.0 2.0 3.0 type 0 q 1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 340} {0 83} ... }} 
 {2...{{...}...}} {3...{{...}...}} ... {...{{...}...}}\endverbatim
        The C implementation is \ref #part. <BR>
*/
