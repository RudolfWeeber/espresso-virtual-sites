/** \page tcl_part The part command
    	\verbatim part <particle_number> ( pos|type|q|v|f|quat|omega|torque|[un]fix <x> <y> <z> |ext_force|bond|exclude [delete] <value>+ )* \endverbatim
	modifies particle data, namely position, type (monomer, ion, ...),
		    charge, velocity, force and bonds. 
	Multiple properties can be changed at once. If you add a new
        particle the position has to be set first because of the spatial
        decomposition. <BR>
	Syntax for the different properties:
	<ul>
	<li> \verbatim pos <x value> <y value> <z value> \endverbatim
	<li> \verbatim type <particle_type_number> \endverbatim
	Restrictions: \<particle_type_number\> >= 0.<BR>
	The \<particle_type_number\> is used in \ref tcl_inter to define the
        parameters of the non bonded interactions between different kinds
        of particles.
	<li> \verbatim q <charge> \endverbatim
	<li> \verbatim v <x value> <y value> <z value> \endverbatim
	<li> \verbatim f <x value> <y value> <z value> \endverbatim
	If flag ROTATION is set in config.h \ref config.h, particle properties such as
	quat, omega, and torque can be used:
	<li> \verbatim quat <q1> <q2> <q3> <q4> \endverbatim
	<li> \verbatim omega <x value> <y value> <z value> \endverbatim
	<li> \verbatim torque <x value> <y value> <z value> \endverbatim
	Fixes the particle in space (Needs compile flag EXTERNAL_FORCES in config.h \ref config.h).
	<li> \verbatim fix <x> <y> <z> \endverbatim
	Fixes the particle in space. By supplying a set of 3 integers
	as arguments it is possible to fix motion in \a x, \a y , or \a z coordinates
	independently.  For example <tt> fix 0 0 1 </tt> will fix
	motion only in z.  Note that <tt> fix </tt> without
	arguments is equivalent to <tt> fix 1 1 1 </tt> (Needs
	compile flag EXTERNAL_FORCES in \ref config.h config.h).
        <li> \verbatim ext_force <x value> <y value> <z value> \endverbatim
	An additional external force is applied to the particle
	(Needs compile flag EXTERNAL_FORCES in \ref config.h config.h).
        <li> \verbatim unfix \endverbatim
	Release any external influence from the particle 
	(Needs compile flag EXTERNAL_FORCES in \ref config.h config.h).
	<li> \verbatim bond <bond_type_number> <partner>+ \endverbatim
	Restrictions: \<bond_type_number\> \>= 0; partner must be an existing particle.<BR>
	The \<bond_type_number\> is used for \ref tcl_inter to define bonded interactions.
	<li> \verbatim bond delete <bond_type_number> <partner>+ \endverbatim
	Searches for the given bond and deletes it.
	<li> \verbatim exclude <exclusion partner>+ \endverbatim
	Restrictions: partner must be an existing particle.<BR>
	Between the current particle and the exclusion partner(s), no nonbonded interactions are
	calculated (Needs compile flag EXCLUSIONS in config.h \ref config.h). Note that unlike bonds,
	exclusions are stored with both partners. Therefore this command adds the defined exclusions
	to both partners.
	<li> \verbatim exclude delete <exclusion partner>+ \endverbatim
	Searches for the given exclusion and deletes it. Again deletes the exclusion with both partners.
	<li> \verbatim bond delete\endverbatim
	will delete all bonds attached to this particle.
	</ul>

	<hr>

	\anchor tcl_part_delete
	\verbatim part <particle_number> delete\endverbatim
	If instead of a property "delete" is given, the particle is deleted 
	and all bonds referencing it.

	<hr>	

        \anchor tcl_part_print
	\verbatim part <particle_number> print (id|pos|type|q|v|f|fix|ext_force|bond|connections)* \endverbatim
        If instead of a property "print" is given the specified 
	properties are written in a simple list form like
        \verbatim 40 8.849 1.8172 1.4677 1.0 {} \endverbatim
	generated by
	\verbatim part 40 print id pos q bonds\endverbatim
	This routine is primarily meant for effective use in Tcl scripts
	(see e. g. \ref tcl_blockfile_write_particles).<BR>

	If no property is given, 
	\verbatim part <particle_number> \endverbatim 
	returns all properties of the particle, if it exists, in the form
	\verbatim 0 pos 2.1 6.4 3.1 type 0 q -1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... } \endverbatim
	which may be used as an input to this function later on. 
	The first integer is the particle number. <BR>

	\verbatim part <particle_number> print connections [<range>] \endverbatim
	Returns the connectivity of the particle up to a certain number of 
	bonds specified by \<range\> (defaults to 1). For particle 5 in a linear chain the 
	result up to range = 3 would look like:
	\verbatim { { 4 } { 6 } } { { 4 3 } { 6 7 } } { {4 3 2 } { 6 7 8 } } \endverbatim
	The function is useful when you want to create bonded interactions to all other 
	particles a certain particle is connected to. Note that this output can not be used as 
	input to the part command. Check results if you use them in ring structures.
	
 	<hr>

	\verbatim part deleteall \endverbatim
	deletes <i>all</i> particles currently present in the simulation.<BR>
	Without any parameters at all,

 	<hr>

	\verbatim part auto_exclusions [<range>]\endverbatim
	creates exclusions for <i>all</i> particles pairs connected by not more than \<range\> bonds (range defaults to 2).  This
	is typically used in atomistic simulations, where nearest and next nearest neigbor interactions along the chain have to be
	omitted since they are included in the bonding potentials. For example, if the system contains particles 0...100, where
	particle n is bonded to particle n-1 for 1<=n<=100, then part auto_exclusions will result in the exclusions:
	<ul>
        <li> particle 1 does not interact with particles 2 and 3
        <li> particle 2 does not interact with particles 1, 3 and 4
        <li> particle 3 does not interact with particles 1, 2, 4 and 5
	<li> ...
        </ul>
 	<hr>

	\verbatim part delete_exclusions \endverbatim
        deletes <i>all</i> exclusions currently present in the system.

	<hr>

	\verbatim part \endverbatim
	returns the properties of <i>all</i> stored particles in a 
	tcl-list with the same format as specified above:
	\verbatim {0 pos 2.1 6.4 3.1 type 0 q -1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... }} 
 {1 pos 1.0 2.0 3.0 type 0 q 1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 340} {0 83} ... }} 
 {2...{{...}...}} {3...{{...}...}} ... {...{{...}...}}\endverbatim
        The C implementation is \ref #part. <BR>
*/
