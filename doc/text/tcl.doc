/** \page tcl Using the Tcl Extension

The program Espresso is an enhanced Tcl interpreter. Additionally to the standard commands
of Tcl it offers the following commands, which are implemented in C and provide the
interface between the Tcl script and the MD code:

<ul>
  <li><b>Tools for creating a physical system:</b><ul>
    <li>\verbatim part <particle_number> ( pos|type|q|v|f|quat|omega|torque|[un]fix <x> <y> <z> |ext_force|bond| [delete] <value>+ )* \endverbatim
	modifies particle data.
	For more information, see \ref tcl_part.
 
  </ul>Pre-defined geometries:<ul>
    <li>\verbatim polymer <N_P> <MPC> <bond_length> [start <part_id>] [pos <x> <y> <z>] [mode { SAW | RW } [<shield> [<max_try>]]] 
                                   [charge <val_cM>] [distance <cM_dist>] [types <type_nM> [<type_cM>]] [FENE <type_FENE>] \endverbatim
	creates \<N_P\> polymer chains with \<MPC\> monomers each \<bond_length\> apart in the simulation box.
	For more information, see \ref tcl_polymer.

    <li>\verbatim counterions <N_CI> [start <part_id>] [mode { SAW | RW } [<shield> [<max_try>]]] [charge <val_CI>] [type <type_CI>] \endverbatim
	creates \<N_CI\> counterions in the simulation box. For more informations, see \ref tcl_counterions.

    <li>\verbatim salt <N_pS> <N_nS> [start <part_id>] [mode { SAW | RW } [<shield> [<max_try>]]] [charges <val_pS> [<val_nS>]] [types <type_pS> [<type_nS>]] \endverbatim
    	creates \<N_pS\> positively and \<N_nS\> negatively charged salt ions of charge \<val_pS\> and \<val_nS\> within the simulation box.
	For more information, see \ref tcl_salt.

    <li>\verbatim diamond <a> <bond_length> <MPC> [counterions <N_CI>] [charges <val_nodes> <val_cM> <val_CI>] [distance <cM_dist>] [nonet] \endverbatim
        Creates a diamond-shaped polymer network with 8 tetra-functional nodes connected by 2*8 polymer chains of length \<MPC\>.
	For more information, see \ref tcl_diamond.

    <li>\verbatim icosahedron <a> <MPC> [counterions <N_CI>] [charges <val_cM> <val_CI>] [distance <cM_dist>] \endverbatim
        Creates a modified icosahedron to model a fulleren (or soccer ball).
	For more information, see \ref tcl_ico.

  </ul>Auxiliary functions:<ul>
    <li>\verbatim crosslink <N_P> <MPC> [start <part_id>] [catch <r_catch>] [distLink <link_dist>] [distChain <chain_dist>] [FENE <type_FENE>] [trials <max_try>] \endverbatim
	Attempts to end-crosslink the current configuration of \<N_P\> equally long polymers with \<MPC\> monomers each, 
	returning how many ends are successfully connected. For more information, see \ref tcl_crosslink.

    <li>\verbatim velocities <v_max> [start <part_id>] [count <N_T>] \endverbatim
	Sets the velocities of the particles with particle ID (see \ref tcl_part) between \<part_id\> and \<part_id\>+\<N_T\> 
	(defaults to '0' & '[setmd npart]-\<part_id\>') 
	to a random vector with length in [-vmax,vmax], and returns the absolute value of the total velocity assigned.
    </ul>

<br>
  <li><b>Setting interactions and parameters:</b><ul>
    <li>\verbatim inter ( <particle_type_number1> <particle_type_number2> | <bond_type_number> ) <interaction_type> <value>+ \endverbatim
	sets the parameters for interactions.
	For more information, see \ref tcl_inter.

    <li> \verbatim setmd <variable> <value>+ \endverbatim
	modifies variables declared in \ref #fields.
	For more information, see \ref tcl_setmd.

    <li> \verbatim constraint <type_name | delete> [parameters] \endverbatim
        sets the parameters for constraints. 
	For more information, see \ref tcl_constraint.
    </ul>

<br>
  <li><b>Running the simulation:</b><ul>
    <li>\anchor tcl_integrate \verbatim integrate <steps> \endverbatim
	run \<steps\> integration steps. 
	The C implementation is \ref #integrate.

    <li>\verbatim change_volume { <V_new> | <L_new> { x | y | z | xyz } } \endverbatim
        changes the volume of either a cubic simulation box to the new volume <tt>\<V_new\></tt> 
	or its given x-/y-/z-/xyz-extension to the new box-length <tt>\<L_new\></tt>, 
	and isotropically adjusts the particles coordinates as well. 
	The function returns the new volume of the deformed simulation box.
	The C implementation is \ref change_volume.

    <li>\verbatim invalidate_system \endverbatim
        forces a system re-init which, among others, helps to ensure continuity upon working with checkpoints.
	For more information, see \ref tcl_invalidate_system.

    <li>\verbatim cellsystem \endverbatim
        Changes the data structure to the desired cell system.
	For more information, see \ref tcl_cellsystem.

    <li>\verbatim imd ( connect|disconnect|listen|positions ) <param>\endverbatim
    <li>\verbatim prepare_vmd_connection [<filename> [<wait> [<start>]]] \endverbatim
        network connection handling to the visual interface program VMD.
	For more information, see \ref tcl_imd.
    </ul>

<br>
  <li><b>Performing an analysis of the system:</b><ul>
    <li>\verbatim analyze ( mindist|nbhood|distto| energy | pressure | rdf|distribution | set|re|rg|rh|g123|formfactor|internal_dist... )\endverbatim
        calculates different observables of the current configuration and/or of a given set of previous states.<br>
	For more information on its vast abilities, see \ref tcl_analyze.

    <li>\verbatim uwerr <data> <nrep> {<col>|<f>} [<s_tau> [<f_args>]] \endverbatim
        get the error of errors of Monte Carlo simulations. (see \ref tcl_uwerr)
    </ul>

<br>
  <li><b>File-I/O, checkpoints, and other auxiliary functions:</b><ul>
    <li>\verbatim blockfile <channel> ( read|write start|end|variable|auto|toend ) <param>?\endverbatim
        blockfile allows for convenient access to a block format structured file \<channel\>.
	For more information, see \ref tcl_blockfile.

    <li>\verbatim checkpoint_set <destination> [<# of configs> [<tclvar> [<ia_flag>]]]\endverbatim
    <li>\verbatim checkpoint_read <origin>\endverbatim
    <li>\verbatim polyBlockWrite <path> <param_list> <part_list>\endverbatim
    <li>\verbatim polyBlockWriteAll <destination> [<tcl-var> [<rdm> [<configs>]]] \endverbatim
        The first two commands aid in saving/restoring the complete current and previous states of the simulation run, 
	while the other two use \ref tcl_blockfile to write informations about the current timestep to disk.
	For details on checkpoints, refer to \ref io.

    <li>\verbatim code_info \endverbatim
        returns information on the version and compilation status of
        the used Espresso programm.

    <li>\verbatim t_random [{ int <n> | seed [<seed(0)> ... <seed(n_nodes-1)>] | stat [status-list] }]\endverbatim
    <li>\verbatim bit_random [{ seed [<seed(0)> ... <seed(n_nodes-1)>] | stat [status-list] }] \endverbatim
    <li>\verbatim g_random \endverbatim
        different implementations of random number generators returning random deviates with a uniform probability distribution,
	except for <tt>g_random</tt> which returns normally (Gaussian) distributed deviates with zero mean and unit variance,
	using <tt>t_random</tt> as the source of uniform deviates, and Numerical Recipes' Transformation Mehod (ch. 7.2).<br>
	For details and more information, see \ref tcl_t_random or \ref tcl_bit_random.
    </ul>
</ul>

At program start, Espresso reads in a starting script
<i>'init.tcl'</i>. It is assumed to be located in a directory
<i>"scripts"</i>, but this default value can be overridden by the
environment variable ESPRESSO_SCRIPTS.<BR>
It also includes some useful tcl-scripts (which should always be
located in the same directory <i>"scripts"</i>) providing additional
commands which are implemented in tcl and enhance the interface
between the tcl-script and the MD-code. For details on these procedures see
<ul>
<li> \ref convertDeserno
<li> \ref statistics
<li> \ref io
<li> \ref writepdb
<li> \ref math
<li> \ref aux
<li> \ref blade
</ul>
*/
