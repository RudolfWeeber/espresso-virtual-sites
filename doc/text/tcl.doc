/** \page tcl Using the Tcl Extension

The program Espresso is an enhanced Tcl interpreter. Additionally to the standard commands
of Tcl it offers the following commands, which are implemented in C and provide the
interface between the Tcl script and the MD code:
<ul>
  <li>\ref particle_setup "Setting up the particles"

	Most important commands: \ref tcl_part "part" .
  </li>
  <li>\ref inter_setup    "Setting up the interactions"

	Most important commands: \ref tcl_inter "inter", \ref tcl_setmd "setmd"
  </li>
  <li>\ref run_sim        "Running your simulation"

	Most important commands: \ref tcl_integrate "integrate", \ref tcl_thermostat "thermostat", \ref tcl_cellsystem "cellsystem"
  </li>
  <li>\ref analysis       "Analyzing your data"

	Most important commands: \ref tcl_analyze "analyze"
  </li>
  <li>\ref aux_funcs      "File I/O and utilities"

	Most important commands: \ref tcl_blockfile "blockfile", \ref io "checkpoints"
  </li>
  <li>\ref tcl_features_short       "Checking for features of Espresso"

	Most important commands: \ref tcl_code_info "code_info", \ref tcl_has_feature "has_feature", \ref tcl_require_feature "require_feature"
  </li>
  <li>\ref tcl_procs      "Additional TCL-Procedures"

	File format conversions, Math, Analysis, Graphics
  </li>
</ul>

Section \ref errors "Errorhandling" describes the structure of error
messages that may be returned.  Furthermore, you may put a file
<tt>.espressorc</tt> into your home directory that contains
Tcl-commands. This file will be loaded upon the start of an Espresso
script.

\section particle_setup Setting up the particles
  <ul>
    <li>\verbatim part <particle_number> ( pos|type|q|v|f|quat|omega|torque|[un]fix <x> <y> <z> |ext_force|bond| [delete] <value>+ )* \endverbatim
	modifies particle data.
	For more information, see \ref tcl_part.
 
  </ul>
  Pre-defined geometries:
  <ul>
    <li>\verbatim polymer <N_P> <MPC> <bond_length> [start <part_id>] [pos <x> <y> <z>] [mode { SAW | RW } [<shield> [<max_try>]]] 
                                   [charge <val_cM>] [distance <cM_dist>] [types <type_nM> [<type_cM>]] [FENE <type_FENE>] 
				   [angle <angle> [<angle2> [<x2> <y2> <z2>]]] \endverbatim
	creates \<N_P\> polymer chains with \<MPC\> monomers each \<bond_length\> apart in the simulation box.
	For more information, see \ref tcl_polymer.

    <li>\verbatim counterions <N_CI> [start <part_id>] [mode { SAW | RW } [<shield> [<max_try>]]] [charge <val_CI>] [type <type_CI>] \endverbatim
	creates \<N_CI\> counterions in the simulation box. For more informations, see \ref tcl_counterions.

    <li>\verbatim salt <N_pS> <N_nS> [start <part_id>] [mode { SAW | RW } [<shield> [<max_try>]]] [charges <val_pS> [<val_nS>]] [types <type_pS> [<type_nS>]] \endverbatim
    	creates \<N_pS\> positively and \<N_nS\> negatively charged salt ions of charge \<val_pS\> and \<val_nS\> within the simulation box.
	For more information, see \ref tcl_salt.

    <li>\verbatim diamond <a> <bond_length> <MPC> [counterions <N_CI>] [charges <val_nodes> <val_cM> <val_CI>] [distance <cM_dist>] [nonet] \endverbatim
        Creates a diamond-shaped polymer network with 8 tetra-functional nodes connected by 2*8 polymer chains of length \<MPC\>.
	For more information, see \ref tcl_diamond.

    <li>\verbatim icosahedron <a> <MPC> [counterions <N_CI>] [charges <val_cM> <val_CI>] [distance <cM_dist>] \endverbatim
        Creates a modified icosahedron to model a fulleren (or soccer ball).
	For more information, see \ref tcl_ico.

  </ul>
  Auxiliary functions:
  <ul>
    <li>\verbatim crosslink <N_P> <MPC> [start <part_id>] [catch <r_catch>] [distLink <link_dist>] [distChain <chain_dist>] [FENE <type_FENE>] [trials <max_try>] \endverbatim
	Attempts to end-crosslink the current configuration of \<N_P\> equally long polymers with \<MPC\> monomers each, 
	returning how many ends are successfully connected. For more information, see \ref tcl_crosslink.

    <li>\verbatim velocities <v_max> [start <part_id>] [count <N_T>] \endverbatim
	Sets the velocities of the particles with particle ID (see \ref tcl_part) between \<part_id\> and \<part_id\>+\<N_T\> 
	(defaults to '0' & '[setmd npart]-\<part_id\>') 
	to a random vector with length in [-vmax,vmax], and returns the absolute value of the total velocity assigned.
  </ul>

\section inter_setup Setting up the interactions and parameters
  <ul>
    <li>\verbatim inter ( <particle_type_number1> <particle_type_number2> | <bond_type_number> ) <interaction_type> <value>+ \endverbatim
	sets the parameters for interactions.
	For more information, see \ref tcl_inter.

    <li> \verbatim setmd <variable> <value>+ \endverbatim
	modifies variables declared in \ref #fields.
	For more information, see \ref tcl_setmd.

    <li> \verbatim constraint <type_name | delete> [parameters] \endverbatim
        sets the parameters for constraints. 
	For more information, see \ref tcl_constraint.
  </ul>

\section run_sim Running the simulation
  <ul>
    <li> \anchor tcl_integrate \verbatim integrate { <steps> | set <method> <parameter>+ } \endverbatim
	 Run \<steps\> integration steps or set an integration method.
	 The C implementation is \ref #integrate.

    <li> \anchor tcl_thermostat \verbatim thermostat { <method> <parameter>+ | off } \endverbatim
         Change thermostat settings. See also \ref thermostat.h
	 The C implementation is \ref #thermostat.

    <li> \verbatim change_volume { <V_new> | <L_new> { x | y | z | xyz } } \endverbatim
         changes the volume of either a cubic simulation box to the new volume <tt>\<V_new\></tt> 
	 or its given x-/y-/z-/xyz-extension to the new box-length <tt>\<L_new\></tt>, 
	 and isotropically adjusts the particles coordinates as well. 
	 The function returns the new volume of the deformed simulation box.
	 The C implementation is \ref change_volume.

    <li> \verbatim invalidate_system \endverbatim
         forces a system re-init which, among others, helps to ensure continuity upon working with checkpoints.
	 For more information, see \ref tcl_invalidate_system.

    <li> \verbatim cellsystem \endverbatim
         Changes the data structure to the desired cell system.
	 For more information, see \ref tcl_cellsystem.

    <li> \anchor tcl_nemd \verbatim nemd { <method> <parameter>+ | off | profile | viscosity } \endverbatim
         Use NEMD (Non Equilibrium Molecular Dynamics) to simulate a system under shear. See also \ref nemd.h.
	 The C implementation is \ref #nemd.
    <li> \verbatim imd ( connect|disconnect|listen|positions ) <param>\endverbatim

    <li> \verbatim prepare_vmd_connection [<filename> [<wait> [<start>]]] \endverbatim
         network connection handling to the visual interface program VMD.
	 For more information, see \ref tcl_imd.
  </ul>

\section analysis Performing an analysis of the system
  <ul>
    <li>\verbatim analyze ( mindist|nbhood|distto| energy | pressure | rdf|distribution | set|re|rg|rh|g123|formfactor|internal_dist... )\endverbatim
        calculates different observables of the current configuration and/or of a given set of previous states.<br>
	For more information on its vast abilities, see \ref tcl_analyze.

    <li>\verbatim uwerr <data> <nrep> {<col>|<f>} [<s_tau> [<f_args>]] \endverbatim
        get the error of errors of Monte Carlo simulations. (see \ref tcl_uwerr)
  </ul>

\section aux_funcs File-I/O, checkpoints
  <ul>
    <li>\verbatim blockfile <channel> ( read|write start|end|variable|auto|toend ) <param>?\endverbatim
        blockfile allows for convenient access to a block format structured file \<channel\>.
	For more information, see \ref tcl_blockfile.

    <li>\verbatim checkpoint_set <destination> [<# of configs> [<tclvar> [<ia_flag>]]]\endverbatim
    <li>\verbatim checkpoint_read <origin>\endverbatim
    <li>\verbatim polyBlockWrite <path> <param_list> <part_list>\endverbatim
    <li>\verbatim polyBlockWriteAll <destination> [<tcl-var> [<rdm> [<configs>]]] \endverbatim
        The first two commands aid in saving/restoring the complete current and previous states of the simulation run, 
	while the other two use \ref tcl_blockfile to write informations about the current timestep to disk.
	For details on checkpoints, refer to \ref io.


    <li>\verbatim t_random [{ int <n> | seed [<seed(0)> ... <seed(n_nodes-1)>] | stat [status-list] }]\endverbatim
    <li>\verbatim bit_random [{ seed [<seed(0)> ... <seed(n_nodes-1)>] | stat [status-list] }] \endverbatim
    <li>\verbatim g_random \endverbatim
        different implementations of random number generators returning random deviates with a uniform probability distribution,
	except for <tt>gauss_random</tt> which returns normally (Gaussian) distributed deviates with zero mean and unit variance,
	using <tt>t_random</tt> as the source of uniform deviates, and Numerical Recipes' Transformation Mehod (ch. 7.2).<br>
	For details and more information, see \ref tcl_t_random or \ref tcl_bit_random.
  </ul>

\section tcl_features_short Checking for features of the Espresso kernel
<ul>
    <li>\verbatim code_info \endverbatim
    <li>\verbatim has_feature [<feature>...]\endverbatim
    <li>\verbatim require_feature [<feature>...]\endverbatim
	get information on version, compilation status and the
	\ref features of the used Espresso program. For more information,
	see \ref tcl_features.
    <li>
</ul>

\section tcl_procs Additional TCL-Procedures

At program start, Espresso reads in a starting script
<i>'init.tcl'</i>. It is assumed to be located in a directory
<i>"scripts"</i>, but this default value can be overridden by the
environment variable ESPRESSO_SCRIPTS.<BR>
It also includes some useful tcl-scripts (which should always be
located in the same directory <i>"scripts"</i>) providing additional
commands which are implemented in tcl and enhance the interface
between the tcl-script and the MD-code. For details on these procedures see
<ul>
<li> \ref convertDeserno
<li> \ref statistics
<li> \ref io
<li> \ref writepdb
<li> \ref math
<li> \ref aux
<li> \ref blade
</ul>

\section errors Errorhandling
	Errors in the parameters are detected as early as possible, and hopefully self explanatory error messages
	returned without any changes to the data in the internal data of Espresso. This include errors such as
	setting nonexistent properties of particles or simply misspelled commands. These errors are returned as
	standard Tcl errors and can be caught on the Tcl level via
	\verbatim catch {script} err \endverbatim
	When run noninteractively, Tcl will return a nice stack backtrace which allows to quickly find the line causing
	the error.

	However, some errors can only be detected after changing the internal structures, so that Espresso is left in
	a state such that integration is not possible without massive fixes by the users. Especially errors occuring
	on nodes other than the primary node fall under this condition, for example a broken bond or illegal parameter
	combinations.

	For error conditions such as the examples given above, an Tcl error message of the form
    	\verbatim <Tcl error> background 0 {<error a>} {<error b>} 1 {<error c>}\endverbatim
	is returned. Following possibly a normal Tcl error message, after the <em>background</em> keyword all severe errors
    	are listed node by node, preceeded by the node number.
    	a special error is "<consent>", which means that one of the slave nodes found exactly the same errors as
    	the master node. This happens mainly during the initialization of the integrate, e. g. if the time step
    	is not set. In this case the error message will be
    	\verbatim background_errors 0 {time_step not set} 1 <consent> \endverbatim

	In each case, the current action was not fulfilled, and possibly other parts of the internal data also had to be
	changed to allow Espresso to continue, so you should really know what you do if you try and catch these errors.
	
	For a full list of background-errors visit the \ref background_errors page
*/
