/** \page statistics Statistical Analysis and Creating Gnuplots

The following procedures are found in scripts/statistics.tcl.
<ul>
    <li>\anchor tcl_plotObs
        \verbatim plotObs <file> {x:y1 ... x:yn} [titles {"title.y1" ... "title.yn"}] [labels {"xlabel" "ylabel"}] [scale <gnuplot-scale>] [cmd <gnuplot-command>] [out <out>]\endverbatim
	creates a gnuplot of the column-wise stored data in \<file\>
	writing it to \<file\>.ps by default.<BR>
	Using gnuplot syntax, the columns x:y1,... are plotted
	(e. g. '<tt>3:2 3:5 3:8</tt>' plots the 3rd column as x-axis,
	the 2nd, 5th and 8th column
	in \<file\> as three independent data-series on the
	y-axis). The scale of the axis may be given with an optional
	flag using the
	gnuplot keywords, e. g. '<tt>scale logscale xy</tt>' to enable
	log-log-plotting; by default, <tt>nologscale xy</tt> is
	assumed.<BR>

	With <tt>titles</tt> each of the data-series can be given an
	individual description. <tt>labels</tt> allow to set the
	annotation of the axis;
	if only the xlabel is specified, the filename \<file\> is used for the y-axis.<BR>
	If the different data series are in multiple files, \<files\>
	may be given as a tcl-list '{ \<file1\> \<file2\> ... }';
	however, in this case
	each <tt>x:yi</tt> refers to one file only, hence the length
	of both tcl-lists must be equal.<BR>
	For executing any other gnuplot-commands simply pass them as
	one-liner using the '<tt>cmd \<gnuplot-command\></tt>'-option,
	e. g.
	<tt>plotObs ... cmd "set key left"</tt> to adjust the titles on the left side.<BR>
	To specify a different output-file than the default
	\<file\>.ps, use the <tt>out \<out\></tt>-option; in that case
	\<out\>.ps is the result.
    <li>\anchor tcl_plotJoin
        \verbatim plotJoin <destinations> <final>\endverbatim
	joins the .ps-files given by the tcl-list \<destinations\>
	into one single .ps-file '\<final\>.ps' while placing any two
	files on one page.<BR>
	Note that the resulting files may be huge and therefore hard to print!

    <li>\verbatim calcObAv <file> <index> [<start>]\endverbatim
        returns the average of the column with index \<index\> in \<file\>.<BR>
	If the optional parameter \<start\> is given, the first
	\<start\> lines are discarded, the average is only taken for
	the remaining data in \<file\>.
    <li>\verbatim calcObErr <file> <index> [<start>]\endverbatim
        returns the error of the average of the column with index \<index\> in \<file\>.<BR>
	If the optional parameter \<start\> is given, the first
	\<start\> lines are discarded, the average is only taken for
	the remaining data in \<file\>.
    <li>\anchor tcl_calcObsAv
	\verbatim calcObsAv <file> { <i1> <i2> ... } [<start>] \endverbatim
	derives column-averages of the observables stored at columns with index \<i1\>, \<i2\>,... in \<file\>,
	returning a tcl-list 
	\verbatim<amount of samples> { names (taken from the first line) } { averaged values } { errors of averaged values }\endverbatim
	This is most effective if you are using '<tt>puts $file-handle "[setmd time] $observable1 $observable 2 ..."</tt>' in
	your tcl-script to create the data file \<file\>, and you need the averages of the observables afterwards.<BR>
	Again, if \<start\> is given, as many lines are skipped before the derivation of the average commences.
    <li>\anchor tcl_findObsAv
        \verbatim findObsAv <val> <what>\endverbatim
        extracts the values whose names are given in the tcl-list \<val\> at their respective positions in \<what\>, where
	\<what\> has the list-format as returned by \ref tcl_calcObsAv, returning just these values as tiny tcl-list.
    <li>\verbatim nameObsAv <file> { <name1> <name2> ... } [<start>] \endverbatim
        combines \ref tcl_calcObsAv and \ref tcl_findObsAv by
        accepting the header-names '<tt>\<name1\>...</tt>' as input
        argument, returning
	the averages as a tiny tcl-list 
	\verbatim<# of samples> <average of name1> <average of name2> ... <error of average1> <error of average2> ...\endverbatim
    <li><i>Example:</i><BR>
        If the data-file '<tt>data.obs2</tt>' looks like
	\verbatim t mindist re rg rh Temp p p2 ideal pid 
 0.0 0.926135 6.39158 2.66884 2.53191 1.0 5.954496 35.456017 ideal 0.851101 
 3.0 0.898834 6.21145 2.67247 2.54319 0.974109 6.003794 36.045547 ideal 0.851101
 6.0 0.907179 6.27208 2.66989 2.52997 0.97327 6.200693 38.448588 ideal 0.851101
 9.0 0.902748 6.83424 2.69967 2.53421 0.988377 6.366481 40.532074 ideal 0.851101 
 ... \endverbatim
	the following will create a tcl-list '<tt>$avg</tt>' containing the averages of some of the observables:
	\verbatim lappend what [calcObsAv data.obs2 { 1 5 6 7 9 } ]
 set avg [findObsAv { Temp mindist p p2 pid } [lindex $what end]] \endverbatim
        The same is achievable with just one line using:
	\verbatim set avg [nameObsAv data.obs2 { Temp mindist p p2 pid }] \endverbatim
	In both cases, the resulting tcl-list will have the form:
	\verbatim 4801 0.909671168923 1.0011450302 6.27845111352 39.4770145345 0.851101 ... \endverbatim
</ul>

*/
