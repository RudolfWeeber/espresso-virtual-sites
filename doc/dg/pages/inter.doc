/** \page tcl_inter The inter command
         \verbatim inter ( <particle_type_number1> <particle_type_number2> | <bond_type_number> ) <interaction_type> <value>+ \endverbatim
	sets the parameters for interactions.

<ol>
	<li> \ref tcl_non_bonded "Non bonded interactions"

		E. g. \ref tcl_lj "Lennard-Jones", \ref tcl_tabulated "tabulated potentials"
	<li> \ref tcl_bonded  "Bonded interactions"

		E. g. \ref tcl_fene "FENE", \ref tcl_harmonic "harmonic"
	<li> \ref tcl_coulomb "Coulomb interaction"

		E. g. \ref tcl_p3m "P3M", \ref tcl_mmm2d "ELC", \ref tcl_dh "Debye-Hückel"
	<li> \ref tcl_other_inter "Other interaction types"
</ol>

\section tcl_non_bonded Non bonded interactions
	\verbatim inter <particle_type_number1> <particle_type_number2> <interaction_type> <value>+ \endverbatim	
	Non bonded interaction between particles of types
	\<particle_type_number1\> and \<particle_type_number2\>
	(the types are those set using \ref tcl_part).<BR>

	If no \<interaction_type\> is given,
	\verbatim inter <particle_type_number1> <particle_type_number2> \endverbatim
	returns the parameters of the currently active potentials for
	non-bonded interactions in the format
	\verbatim 0 1 lennard-jones 1.0 2.0 1.1225 0.0 0.0 \endverbatim
	which corresponds to the input-format of \ref tcl_inter.
	Again the first two integers are \<particle_type_number1\> and \<particle_type_number2\>.

	Currently known \<interaction_type\>s are:

\subsection tcl_lj Lennard Jones

	\verbatim lennard-jones <epsilon> <sigma> <cutoff> <shift> <offset> \endverbatim
		the well known Lennard-Jones potential
		\f[4 \epsilon \left(\left(\frac{\sigma}{r-offset}\right)^{12} -
				 \left(\frac{\sigma}{r-offset}\right)^6 + shift\right)\f]
		The order of the parameters is
		\f$\epsilon, \sigma, cutoff, shift, offset\f$.

		For system warmup you can cap the Lennard-Jones
		potential with a maximal force which can be set with:
		\verbatim inter ljforcecap <maxforce> \endverbatim
		For particle distances which would lead to larger
		forces than \f$ maxforce \f$ the Lennard-Jones
		potential is replaced by
		\f[ maxforce \;\;  r \f] 
		Particles placed exactly on top of each other will be
		subject to a force of magnitude \f$ maxforce \f$
		applied in \f$ \pm x \f$ direction.
		To return to the uncapped potential you have to set \f$  maxforce \f$ to zero using
		\verbatim inter ljforcecap 0 \endverbatim
		Note that ljforcecap applies to all given
		Lennard-Jones interactions regardless of the particle
		types.

	Implemented in lj.h.

\subsection tcl_ss Soft sphere potential

	\verbatim soft-sphere <a> <n> <cut> <offset> \endverbatim

	Implemented in soft.h.

	\todo Write docs for the soft sphere potential.

\subsection tcl_ljcos Lennard-Jones + cosine potential
	\verbatim lj-cos <epsilon> <sigma> <cutoff> <offset> \endverbatim
		the Lennard-Jones+Cosine potential (Soddemann
		et. al. Eur. Phys. J. E. 6, 409-419 (2001))

		for	\f$ r<r_{min}=offset+2^{1/6}*\sigma \f$
            
			\f[4 \epsilon \left(\left(\frac{\sigma}{r-offset}\right)^{12} -
				 \left(\frac{\sigma}{r-offset}\right)^6 \right)\f]


		for \f$ cutoff>r>r_{min}=offset+2^{1/6}*\sigma \f$
            
		\f[\frac{1} {2} \epsilon \left(\cos (\alpha {(r-offset)}^2 + \beta) -1 \right) \f]
            
	        where \f$ \alpha \f$ and \f$ \beta \f$ are given by,
            
	        \f[ \alpha= \frac {\pi} { {(cutoff-offset)}^2 - {(r_{min}-offset)}^2 } \f]
            
                \f[ \beta= \pi \left( 1 - \frac {{(r_{min}-offset)}^2} {{(cutoff-offset)}^2 - {(r_{min}-offset)}^2 } \right) \f]

		The order of the parameters is
		\f$\epsilon, \sigma, cutoff, offset\f$.

	Implemented in ljcos.h.

\subsection tcl_ljcos2 Lennard-Jones + cosine potential 2 (cosine tail is different than in lj-cos)
	\verbatim lj-cos2 <epsilon> <sigma> <offset> <w> \endverbatim
		a Lennard-Jones+Cosine potential

		for	\f$ r<r_{change}=offset+2^{1/6} \sigma \f$
            
			\f[4 \epsilon \left(\left(\frac{\sigma}{r-offset}\right)^{12} -
				 \left(\frac{\sigma}{r-offset}\right)^6 \right)\f]


		for \f$ cutoff=offset+2^{1/6} \sigma + w > r > r_{change} \f$
            
		\f[ \epsilon \space {\cos}^2 \frac {\pi (r-r_{change})} {2 w} \f]
            
		The order of the parameters is
		\f$\epsilon, \sigma, offset, w\f$.

                The potential can be capped in the same way as the Lennard-Jones potential.
		The forcecap is also set using:
                \verbatim inter ljforcecap <maxforce> \endverbatim  

	Implemented in ljcos2.h.

\subsection tcl_morse Morse potential

	\verbatim morse <epsilon> <alpha> <rmin> <cut> \endverbatim

	\verbatim morseforcecap <maxforce> \endverbatim

	Implemented in morse.h.

	\todo Write docs for the morse potential.

\subsection tcl_buck Buckingham potential

	\verbatim buckingham <A> <B> <C> <D> <cut> <discontinuity> <shift> \endverbatim

	Implemented in buckingham.h.

	\todo Write docs for the Buckingham potential.

\subsection tcl_tabulated Tabulated potential
	\verbatim tabulated <filename> \endverbatim	
		An arbitrary tabulated non-bonded pair potential.
		
		To use this potential you must provide a file which
		contains the tabulated forces and energies as a
		function of the separation distance.

		At present the required file format is simply an
		ordered list separated by whitespace. The data reader
		first looks for a \p # character and begins reading
		from that point in the file. Anything before the \p #
		will be ignored.

		The first parameter you should supply in the file is
		the number of data points in the table.  This should
		be an integer.  Take care when choosing an appropriate
		value for the number of points remembering that a copy
		of each lookup table is kept on each node and must be
		referenced very frequently.

		The second parameter you should supply is the minimum
		tabulated separation distance. The third parameter
		should be the maximum tabulated separation distance
		This will act as the effective cutoff value for the
		potential.  Between minval and maxval the force and
		energy are assumed to be tabulated at fixed intervals
		such that the size of this interval is given by:

		\f$ \frac{(maxval - minval)}{n-1} \f$

		Where \f$ n \f$ is the number of data points in the table
	
		The remaining data in the file should consist of n
		data triples \<distance\> \<force\> \<energy\>.  Note
		that distance is only included for human readability
		of the file. Its values do not matter but it must be
		present to satisfy the file read format. In the future
		a more structured file format will be required for the
		tabulated input file. The values of force and energy
		should be given as follows:

		force: 	\f$ -\frac{U'(r)}{r}\f$   

		energy:       \f$U(r) \f$ 

		Needs feature TABULATED compiled in (see \ref config.h).
		\warning This feature has not been fully
		tested. Please use with care.

\subsection tcl_gb Gay-Berne potential
	\verbatim gay-berne <epsilon> <sigma> <cutoff> <k1> <k2> <mu> <nu> \endverbatim
		the Gay-Berne potential for prolate and oblate particles.
		The Gay-Berne potential is an anisotropic version of the classic Lennard-Jones potential,
		with orientational dependence in the range and well-depth functions 
		\f$\sigma\f$ and \f$\epsilon\f$:

		\f[ U(\mathbf{r}_{ij}, \mathbf{\hat{u}}_i, \mathbf{\hat{u}}_j) = 
		4 \epsilon(\mathbf{\hat{r}}_{ij}, \mathbf{\hat{u}}_i, \mathbf{\hat{u}}_j)
		\left[ \left(\frac
		{\sigma_0}{\mathbf{r}_{ij}-\sigma(\mathbf{\hat{r}}_{ij},
		\mathbf{\hat{u}}_i,
		\mathbf{\hat{u}}_j)+\sigma_0}\right)^{12}-
		\left(\frac
		{\sigma_0}{\mathbf{r}_{ij}-\sigma(\mathbf{\hat{r}}_{ij},
		\mathbf{\hat{u}}_i,
		\mathbf{\hat{u}}_j)+\sigma_0}\right)^{6} \right] \f]

		where

		\f[ \sigma( \mathbf{\hat{r}}_{ij}, \mathbf{\hat{u}}_i, \mathbf{\hat{u}}_j) =
		\sigma_{0} \left\{ 1 - \frac{1}{2} \chi \left[
		\frac{ \left( \mathbf{\hat{r}}_{ij} \cdot
		\mathbf{\hat{u}}_i + \mathbf{\hat{r}}_{ij} \cdot
		\mathbf{\hat{u}}_j \right)^{2} }
			{1 + \chi \left(  \mathbf{\hat{u}}_i.\mathbf{\hat{u}}_j \right)  } 
		+ \frac{ \left( \mathbf{\hat{r}}_{ij} \cdot
		\mathbf{\hat{u}}_i - \mathbf{\hat{r}}_{ij} \cdot
		\mathbf{\hat{u}}_j \right)^{2} }
			{1 - \chi \left(  \mathbf{\hat{u}}_i \cdot \mathbf{\hat{u}}_j \right)  } 
		\right] \right\}^{-\frac{1}{2}} \f]

		and

		\f[ \epsilon(\mathbf{\hat{r}}_{ij},
		\mathbf{\hat{u}}_i, \mathbf{\hat{u}}_j) =
		\epsilon_0 \left( 1- \chi^{2}(\mathbf{\hat{u}}_i \cdot
		\mathbf{\hat{u}}_j) \right)^{-\frac {\nu}{2}}
		\left[1-\frac {\chi'}{2} \left( \frac {
		(\mathbf{\hat{r}}_{ij} \cdot \mathbf{\hat{u}}_i+
		\mathbf{\hat{r}}_{ij} \cdot \mathbf{\hat{u}}_j)^{2}}
		{1+\chi' \, \mathbf{\hat{u}}_i \cdot
		\mathbf{\hat{u}}_j }+
		\frac {(\mathbf{\hat{r}}_{ij} \cdot
		\mathbf{\hat{u}}_i-\mathbf{\hat{r}}_{ij} \cdot
		\mathbf{\hat{u}}_j)^{2}}
		{1-\chi' \, \mathbf{\hat{u}}_i \cdot
		\mathbf{\hat{u}}_j } \right) \right]^{\mu} \f]

		Here unit vectors \f$ \mathbf{\hat{u}}_i \f$ and \f$
		\mathbf{\hat{u}}_j \f$ give the orientation of the two
		particles and vector \f$ \mathbf{r}_{ij} = r_{ij}
		\mathbf{\hat{r}}_{ij} \f$ is the intermolecular
		vector.

		The parameters \f$ \chi = \frac{k_1^{2} - 1}{k_1^{2} +
		1 } \f$ and \f$ \chi' = \frac{k_2^{1/\mu} -
		1}{k_2^{1/\mu} + 1 } \f$ are responsible for the
		degree of anisotropy of the molecular properties. \f$
		k_1 \f$ is the molecular elongation, and \f$ k_2 \f$
		is the ratio of the potential well depths for the
		side-by-side and end-to-end configurations. Exponents
		\f$ \mu \f$ and \f$ \nu \f$ are adjastable parameters
		of the potential. There are several Gay-Berne
		paremeterizations exist; the original one being \f$
		k_1 = 3 \f$, \f$ k_1 = 5 \f$, \f$ \mu = 2 \f$ and \f$
		\nu = 1 \f$.

\section tcl_bonded Bonded interactions
	     \verbatim inter <bond_type_number> ( <interaction_type>|<num> ) <value>* \endverbatim
	     Bonded interaction (bonds are set using \ref tcl_part).
	     If \<num\> is given, the number of interaction partners is given (for example 1 for FENE).
	     Currently known \<interaction_type\>s are:

	     <b>Bond length potentials:</b> (two body interactions)
\subsection tcl_fene FENE potential
		\verbatim fene <K_fene> <R_fene> \endverbatim
			\f[ U^{FENE} = -\frac{1}{2} K_{FENE} R_{FENE}^2 \ln
			\left( 1 - \left( \frac{r}{R_{FENE}} \right)^2 \right) \f]

\subsection tcl_harmonic Harmonic potential
		\verbatim harmonic <K_harmonic> <R_harmonic> \endverbatim
			\f[ U^{Harmonic} = \frac{1}{2} K_{harmonic} \left( r - R_{harmonic} \right)^2 \f]

\subsection tcl_subtlj Subtractive Lennard-Jones
	     	\verbatim subt_lj <K_subt_lj>  <R_subt_lj>  \endverbatim
		    	This "bonded" interaction subtracts the Lennard-Jones force/energy of every bonded
			pair from the total force/energy. The first parameter, \verbatim <K_subt_lj> \endverbatim
			is a dummy and is not used. The second parameter, \verbatim <R_subt_lj> \endverbatim 
			is used as a check. If the any bond length in the system exceeds this value,
			the program crashes. When not needed, this crashing can be disabled by commenting 
			out a few lines in subt_lj.h .
			When using this "bonded" interaction, it is worthwhile to consider capping the
			Lennard-Jones potential appropriately so that round-off errors can be avoided. 

	     <b>Bond angle potentials:</b> (three body interactions)<br>

	     <table border="no"><tr>
	     <td>	     
	     There are three different implementations for the bond angle
	     potential. Use the compile flags/switches in \ref config.h to choose
	     one of them. Default is the cosine bend potential (flag:
	     <tt>BOND_ANGLE_COSINE</tt>)<br>

	     The used definitions are illustrated in the picture on
	     the right side showing three particles i,j and k at
	     position \f$ \vec{r}_i \f$, \f$ \vec{r}_j \f$ and
	     \f$ \vec{r}_k \f$ with bond vectors \f$ \vec{b}_{ij} \f$ and
	     \f$ \vec{b}_{jk} \f$. For all potentials we use the
	     definition 
	     \f$ \phi := \arccos(\frac{\vec{b}_{ij}.\vec{b}_{jk}}{b_{ij} b_{jk}}) \f$. 
	     This also explains the use of potentials which contain
	     \f$ \cos(\phi) \f$ since this saves computational
	     costly \f$ \arccos \f$ and \f$ \sin \f$ operations.
	     </td>	     
	     <td>
	     \image latex bond_angle.eps "Definitiion of the bond angle" width=5cm
	     <img src="../figs/bond_angle.gif" width=50>
	     </td>
	     </tr></table>
\subsection tcl_angle Angle potential
	\verbatim angle <bend> [<phi0>]\endverbatim
		
		\<bend\> is the bending constant in units of KT. The
		optional parameter \<phi0\> = \f$ \phi_o \f$ is the
		equilibirum bond angle in rad ranging from 0 to \f$
		\pi \f$. If this paramter is not given the default
		value is \f$ \phi_o = \pi \f$ which corresponds to a
		stretched configuration.

		<ul>
		        <li> Harmonic bond angle potential: (flag: <tt>BOND_ANGLE_HARMONIC</tt>)<br>
			This potential is also used for example in YASP and good old polyMD.
			\f[ U^{bend}_{harmonic} = \frac{bend}{2} (\phi - \phi_0)^2 \f]
		
			<li> Cosine bond angle potential: (flag: <tt>BOND_ANGLE_COSINE</tt>)<br>
			The ESPResSo original!
			\f[ U^{bend}_{cosine} = \frac{bend}{2} (1 + \cos(\phi - \phi0)) \f]
			<li> Cosine square bond angle potential: (flag: <tt>BOND_ANGLE_COSSQUARE</tt>)<br>
			A form which is used for example in the GROMOS96 force field.
			\f[ U^{bend}_{cossquare} = \frac{bend}{2} (\cos(\phi) - \cos(\phi_0))^2 \f]

		</ul>

             <b>Torsional dihedral angle potentials:</b> (four body interactions)<br>

\subsection tcl_dihedral Dihedral potential
             \verbatim dihedral <mult> <bend> <phase> \endverbatim

	     \f[ U^{dihedral} = bend \, (1 + phase \, \, cos(mult \, \phi)) \f]

	     <table border="no"><tr>
	     <td>	     
	     Here \f$ \phi \f$ is the dihedral angle defined by the
	     particle quadrupel p1, p2, p3 and p4. \<mult\> is the
	     multiplicity of the potential (number of minimas) and can
	     take integer values from 1 to 6. \<phase\> is a phase
	     parameter which takes the values \f$ \pm1 \f$ and
	     \<bend\> is the bending constant of the
	     potential. Together with appropriate Lennard-Jones
	     interaction this potential can mimic a large number of
	     atomic torsion potentials. The dihedral angle is the 
	     angle between the planes defined by the particle
	     triples p1, p2 and p3 and p2, p3 and p4 as illustrated in
	     the figure to the right. Dihedral bonds have to be stored
	     at particle p2!.
	     </td>	     
	     <td>
	     \image latex dihedral_angle.eps "Definitiion of the dihedral angle" width=5cm
	     <img src="../figs/dihedral_angle.gif" width=50>
	     </td>
	     </tr></table>

\subsection tcl_btab Tabulated bonded potentials
	     \verbatim tabulated <type> <filename> \endverbatim

	      Tabulated bonded potentials can be any potential for
	      bond length potentials, bond angle potentials and
	      dihedral angle potentials. The tabulated forces and
	      energies have to be provided in a seperate file
	      \<filename\>. The format of this file is identical to
	      the one used for the non-bonded tabulated potentials
	      (see the section about them above). Needs feature
	      TABULATED compiled in (see \ref config.h). The parameter
	      \<type\> defines the type of the potential:

	      <ul>	      
	      <li> \<type\> = bond (two body interaction)

	      Tabulated bond length potential. The force acts in the
	      direction of the connecting vector between the
	      particles. The cutoff is given by
	      the maximal tabulated distance. For distances
	      smaller than the tabulated range it uses a linear
	      extrapolation based on the first two tabulated force
	      values. The C implementations are \ref
	      calc_tab_bond_force and \ref tab_bond_energy in \ref
	      tab.h.

	      <li> \<type\> = angle (three body interaction)	 

	      Tabulated bond angle potential (see also the normal
	      implemented bond angle potentials).  The force on p_left
	      and p_right acts perpendicular to the connecting vector
	      between the particle and p_mid and in the plane defined
	      by the three particles. The force on the middle particle
	      balances the other two forces. The forces are scaled
	      with the invers length of the connecting vectors. It is
	      assumed that the potential is tabulated for all angles
	      between 0 and \f$ \pi \f$. The C implementations are \ref
	      calc_tab_angle_force and \ref tab_angle_energy in \ref
	      tab.h.

	      <li> \<type\> = dihedral (three body interaction)	 

	      Tabulated torsional dihedral angle potenetial (see also
	      the normal implemented dihedral potentials).It is
	      assumed that the potential is tabulated for all angles
	      between 0 and \f$ 2\pi \f$. <b>This potential is not
	      tested yet! Use on own risk</b>. The C implementations
	      are \ref calc_tab_dihedral_force and \ref
	      tab_dihedral_energy in \ref tab.h.

	      </ul>

	     <b> Information about bonded potentials stored in ESPResSo</b>

	     If no \<interaction_type\> is given,
	     \verbatim inter <bond_type_number> \endverbatim
	     returns the parameters of the potential responsible for the
	     bonded interactions of bonds with that \<bond_type_number\> in the format
	     \verbatim 0 FENE 7.0 2.0 \endverbatim	
	     which again directly corresponds to the input-format of the respective
	     interaction with the first integer being \<bond_type_number\>.

\section tcl_coulomb Coulomb interaction
	     \verbatim inter	coulomb <bjerrum-length> <method> [parameters] \endverbatim
		sets the method to calculate the electrostatic interaction.

	    \verbatim inter	coulomb 0.0 \endverbatim
	    disables coulomb interactions hence deactivating the electrostatic subsystem.
	    \verbatim inter	coulomb \endverbatim
	    returns the actual parameters of the coulomb interaction as a tcl-list, e. g.
	    \verbatim {coulomb 1.0 p3m 7.75 8 5 0.1138 0.0} {coulomb epsilon 0.1 n_interpol 32768 mesh_off 0.5 0.5 0.5} \endverbatim
	    which has the correct format to be used as input to 'inter' as well. If
	    \verbatim coulomb 0.0 \endverbatim
	    is returned, no electrostatics are active at the moment.


	     Implemented Methods are: 

\subsection tcl_p3m P3M
	\verbatim p3m <r_cut> <mesh> <cao> <alpha> \endverbatim
		     or
		     \verbatim p3m tune accuracy <value> [r_cut <value> mesh <value> cao <value>] \endverbatim	
		     or
		     \verbatim p3m tunev2 accuracy <value> [r_cut <value> mesh <value> cao <value>] \endverbatim	
		     This is an implementation of the 1/r Coulomb potential
		     \f[ U^{C-P3M} = \ell_B T \frac{q_1 q_2}{r} \f]
		     with help of the P3M Method described elsewhere. 

		     Make sure you know how to tune p3m parameters before
		     using the automatic tuning feature. Details are
		     described in the documentation of \ref
		     P3M_tune_parameters rsp \ref P3M_adaptive_tune_parameters.

		     The two tuning methods follow different methods for determining the optimal parameter. While the tune version
		     simply tries out different values on a grid in the parameter space, the tunev2 version uses a bisection to
		     determine the optimal parameters. In general, for small systems the tune version is faster, while for large
		     systems tunev2 is faster. The results of tunev2 are always at least as good as the parameters achievable from
		     the tune version, and normally the obtained accuracy is much closer to the desired value.

		     Note that any previous settings of r_cut, cao and mesh will be remembered. So if you want to retune your
		     electrostatics, e. g. after a major system change, you should use
		     \verbatim inter coulomb <bjerrum> p3m tune accuracy <acc> r_cut 0 mesh 0 cao 0\endverbatim 

		     Some additional p3m parameters have preset values:
		     \verbatim epsilon = metallic \endverbatim 
		     The dielectric constant of the surrounding medium, metallic (i.e.infinity) or some finite
	             positive number.
		     \verbatim n_interpol = 32768 \endverbatim 
		     Number of interpolation points for the charge assignment function. When this is set to 0, interpolation is turned off.
		     \verbatim mesh_off = 0.5 0.5 0.5 \endverbatim 
		     Offset of the first mesh point from the lower left corner of the simulation box
		     in units of the mesh constant.
		     As soon as p3m is turned on the additional parameters can be changed with:
		     \verbatim inter coulomb <parameter-name> <value(s)>  \endverbatim

		     <b> Make sure that you know the relevance of the P3M parameters before using P3M !!!</b>

\subsection tcl_dh Debye-Hückel potential
	\verbatim dh <kappa> <r_cut> \endverbatim
		     \f[ U^{C-DH} = 	\ell_B T \frac{q_1 q_2 exp(-\kappa r)}{r} \f]
		     For \f[ \kappa = 0 \f] this corresponds to the plain coulomb potential.

\subsection tcl_mmm2d MMM2D
	\verbatim mmm2d <maximal pairwise error> {<fixed far cutoff>} \endverbatim
			MMM2D coulomb method for systems with periodicity 1 1 0. Needs the layered cell system.
			The performance of the method depends on the number of slices of the cell system, which has
			to be tuned manually. It is automatically ensured that the maximal pairwise error is smaller
			than the given bound. The far cutoff setting should only be used for testing reasons, otherwise
			you are more safe with the automatical tuning. If you even don't know what it is, do not even
			think of touching the far cutoff. For details, see \ref MMM_general.

		     <b> Make sure that you read the papers on MMM2D before using it !!!</b>

\subsection tcl_mmm1d MMM1D		
	\verbatim mmm1d <switch radius> {<bessel_cutoff>} <maximal pairwise error> \endverbatim or
		     \verbatim mmm1d tune <maximal pairwise error> \endverbatim
			MMM1D coulomb method for systems with periodicity 0 0 1. Needs the nsquared cell system.
			The first form sets parameters manually. The switch radius determines at which xy-distance
			the force calculation switches from the near to the far formula. If the Bessel cutoff is not
			explicitly given, it is determined from the maximal pairwise error, otherwise this error only
			counts for the near formula. The second, tuning form just takes the maximal pairwise error and
			tries out a lot of switching radii to find out the fastest one. If this takes too long, you can
			change the value of the setmd variable "timings" which controls the number of test force calculations.
			For details, see \ref MMM_general.

		     <b> Make sure that you read the papers on MMM2D before using MMM1D (there are no papers on MMM1D yet,
			 but it is pretty much the same) !!!</b>

\subsection tcl_maggs Maggs' method
	\verbatim maggs <f_mass> <mesh> <field_friction> \endverbatim
		     or
		     \verbatim maggs <f_mass> <mesh> <field_friction> yukawa <kappa> <r_cut> \endverbatim	
		     This is an implementation of the instantaneous 1/r Coulomb interaction
		     \f[ U = \ell_B T \frac{q_1 q_2}{r} \f]
		     as the potential of mean force between charges which are dynamically coupled to a local
		     electromagnetic field. 
	
	             \<f_mass\> is the mass of the field degree of freedom and equals to the square root of the inverted speed of light.

                     \<mesh\> is the number of mesh points for the interpolation of the electromagnetic field

	             \<field_friction\> value of the friction coefficient for the transversal field degrees of freedom (reserved for future developments)

                     Unphysical self--energies,
		     arised as a result of the lattice interpolation  of charges, are corrected by a subtraction scheme
		     based either on the exact lattice Green's function or the combination of the direct subtraction scheme plus the Yukawa subtraction scheme (second method).

		    For the case of Yukawa screened simulation (second method) one has  to enter screening parameter \<kappa\> and
		    the cut-off of the Yukawa potential \<r_cut\>

                    <a href="../maggs_doc/memd/memd.html"> Extended description of the method </a>

\subsection tcl_ELC ELC		
	    \verbatim inter coulomb elc <maximal pairwise error> <gap size> {<far cutoff>} \endverbatim
		This is a special procedure that converts a 3d method, i. e. P3M at the moment, to a 2d method, in computational order N. This
		is definitely faster than MMM2D for larger numbers of particles (>400 at reasonable accuracy requirements). The
		maximal pairwise error is the LUB error of the force between any two charges without prefactors (see the papers).
		The gap size gives the height of the empty region between the system box and the neighboring artificial images
		(again, see the paper). Espresso does <em>not</em> make sure that the gap is actually empty, this is the users responsibility.
	 	The method will compute fine of the condition is not fulfilled, however, the error bound will not be reached. Therefore you
		should really make sure that the gap region is empty (e. g. by constraints). The far cutoff finally is only intended for
		testing and allows to directly set the cutoff. In this case, the maximal pairwise error is ignored. The periodicity has to be
		set to 1 1 1 still, and the 3d method has to be set to epsilon metallic, i.e. metallic boundary conditions. For details,
		see \ref MMM_general.

		<b> Make sure that you read the papers on ELC before using it !!!</b>

\section tcl_other_inter Other interaction types 
	<ul>
	    <li>\verbatim inter <particle_type_number1> <particle_type_number1> comfixed <comfixed_flag> \endverbatim
      This interaction type applies a constraint on particles of type particle_type_number1 such that during the integration the center of mass of these particles is fixed. This is accomplished as follows: The sum of all the forces acting on particles of type particle_type_number1 are calculated. These include all the forces due to other interaction types and also the thermostat. Next a force equal in magnitude, but in the oppositte direction is applied on the particles. This force is divided equally on all the particles of type particle_type_number1, since currently there is no mass concept in Espresso. Note that the syntax of the declaration of comfixed interaction requires the same particle type to be input twice. If different particle types are given in the input, the program exits with an error message. The comfixed_flag can be set to 1 (which turns on the interaction) or 0 (to turn off the interaction).
        
	    <li>\verbatim inter <particle_type_number1> <particle_type_number2> comforce <comforce_flag> 
      <comforce_dir> <comforce_force> <comforce_fratio>\endverbatim
      The comforce interaction type enables one to pull away particle groups of two different types. It is mainly designed for pulling experiments on budles. Within a bundle of molecules of type number 1 (t1) lets mark one molecule as of type 2 (t2). Using comforce one can apply a force such that t2 can be pulled away from the bundle. 
      The comforce_flag is set to 1 to turn on the interaction, and to 0 otherwise. 
      The pulling can be done in two different directions. Either parallel to the major axis of the bundle ( comforce_dir = 0) or perpendicular to the major axis of the bundle (comforce_dir = 1).
      comforce_force is used to set the magnitude of the force.
      comforce_fratio is used to set the ratio of the force applied on particles of t1 vs t2. This is useful if one has to keep the total applied force on the bundle and on the target molecule the same. A force of magnitude comforce_force is applied on t2 particles, and a force of magnitude (comforce_force * comforce_fratio) is applied on t1 particles.
	</ul>

   \verbatim inter \endverbatim
	returns a list of <i>all</i> bonded and non-bonded interactions as a Tcl-list,
	in the same formats as above, e. g.
	\verbatim {0 0 lennard-jones 1.0 2.0 1.1225 0.0 0.0} {0 FENE 7.0 2.0} {1 angle 1.0}\endverbatim	
	The C implementation is \ref #inter.
*/
