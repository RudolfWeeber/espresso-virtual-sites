/** \page ug Writing the User's Guide

\section Structure

  The User's Guide is written in LaTeX and contains the following
  parts:
  - Introduction: this chapter shall give the reader an overview
    over all of ESPResSo's algorithms and methods.
  - First steps: shall give a quick introduction on compiling and
      running ESPResSo, as well as on how to write a script.
  - Installation: shall explain the installation of ESPResSo in
      detail.
  - Setting up the system, Running the simulation, Analysis and
      Auxilliary commands: shall explain all of ESPResSo's
      Tcl-commands in detail.
  - Under the hood: shall explain the important internals of
      ESPResSo: parallelization, cell system, ...
  - Getting involved: where to find the DG, how to get started in
      using the C-code, where to report bugs, mailing list, etc.
  - ESPResSo quick reference: automatically generated list of all
      Tcl command syntax descriptions
  - Features: lists all features of ESPResSo
  - The rest of the chapters contain scientific descriptions of some
      of the employed algorithms that are not to be found anywhere
      else.

\section general General issues
  - Other than usual, in the UG's \c .tex -files, the underscore \c _
    is a normal character in most cases, i.e. it can be used
    unquoted. Unfortunately, however, this makes it impossible to use
    \c _ in LaTeX-labels (don't ask me why!).
  - Headings should start with a capital letter and continue with
      lower-case letters (<i>First steps</i> and <strong>not</strong>
      <i>First Steps</i>)
  - Use the "-ing" form in heading, i. e. "Setting up particles"
    instead of "Particle setup" or the like.

\section building_ug Building the User's Guide
  - To build the User's Guide, you need to have a LaTeX-installation
    that includes BibTeX, PDFLaTeX and makeindex. All installations
    that I know of provide these tools.
  - The following LaTeX-packages that might not be standard are
    required:
    - koma-script: the koma-script classes provide a nicer layout than
      the standard LaTeX classes.
    - hyperref: allows hyperlinks and bookmarks within PDF documents
  - There are two methods to build the User's Guide:
    - Use <tt>make ug</tt> from the build directory
      (<tt>obj.</tt><i>arch</i><tt>/doc/ug</tt>) to build it. This
      will automatically generate the ESPResSo quick reference and
      call latex, bibtex and makeindex as required.
    - Use <tt>perl latexmk</tt> from the source directory. This will
      basically do the same, however, it will \e not automatically
      update the quick reference. The davantage of this method is,
      that you can use all of \c latexmk s nice features, such as
      <tt>-pvc</tt>. You can always rebuild the quick reference
      manually by calling
\verbatim
awk -f assemble_quickref.awk > quickref.inp
\endverbatim
 
\section adding_files_ug Adding new files

  To add new LaTeX-files to the User's Guide, you need to modify
  - \c ug.tex : add an appropriate include command near the end of the
    file 
  - \c Makefile.am : add the file to the variable \c ug_TEXFILES . Run
    \c autogen.sh from the top level source directory to regenerate
    <tt>Makefile.in</tt> and <tt>configure</tt> from the build
    directory to regenerate the Makefile itself.

\section newcommands Additional environments and commands

  To maintain a consistent layout, a number of environments and
  commands have been defined that should be used where applicable. 
  - For the description of ESPResSo's Tcl-commands, read \ref
    essyntax.
  - The name of ESPResSo should be set via the command \c \\es.
  - The strings <em>i.e.</em>, <em>e.g.</em> and <em>et al.</em>
    should be set via \c \\ie, \c \\eg and \c \\etal.
  - For short code pieces that can be displayed inline, use 
    <tt>\\codebox{<i>text</i>}</tt> or 
    <tt>\\verb!<i>text</i>!</tt>
  - For longer code pieces or the syntax decription of non-Tcl
commands, the environment \c code exists:
\verbatim
\begin{code}
  ...
\end{code}
\endverbatim
    This is \e not a verbatim environment, i.e. it will evaluate
    LaTeX-commands inside. Therefore, the characters \c \\,\c { and 
    \c } need to be quoted like \c \\\\, \c \\\{, \c \\\} inside!
    Also, the underscore character \c _ needs qo be quoted like 
    \c \\_. On the other  hand, it is possible to use other layout
    commands (like \c \\textit) inside.
  - For pieces of Tcl-code that make extensive use of \c { and \c }, a
    verbatim environment \c tclcode exists:
\verbatim
\begin{tclcode}
 ...
\end{tclcode}
\endverbatim

\section tclcommand Documentation of Tcl commands

\subsection syntax_definition Formal syntax definition

\e All ESPResSo-commands have to be documented in the User's Guide.

At the beginning of each of the command descriptions, please use the
command
<tt>\\newescommand[<i>label</i>]{<i>command</i>}</tt> to
automatically generate a label <tt>es:<i>command</i></tt> and
create appropriate index entries. The optional argument <i>label</i>
is only required, when <i>command</i> contains an underscore character
(\c _ ). In that case, a label <tt>es:</tt><i>label</i> is generated
that should not contain an underscore character.

For the <em>formal syntax definition</em>, you have to use the
environment \c essyntax. It will generate the headings <em>Syntax</em>
and <em>Description</em>, and furthermore it will copy the syntax
definition to the quick reference guide. For an example, look to the
documentation of the \c part command in the file \c part.tex . Inside
the \c essyntax environment, you have to use the following commands
for typesetting the definition:

- <tt>\\variant{<i>number</i>}</tt> to typeset the label of a command
  variant
- <tt>\\var{<i>name</i>}</tt> to typeset a variable argument
- <tt>\\keyword{<i>text</i>}</tt> or <tt>\\lit{<i>text</i>}</tt> to
  typeset keywords or literals
- <tt>\\opt{<i>text</i>}</tt> to typeset optional arguments. Note that
  usually, the text inside the \c opt command will not be wrapped. If
  the optional argument is pretty long and needs to be wrapped, use \c
  \\optlong .
- <tt>\\optlong{<i>text</i>}</tt> to typeset long optional argument
  blocks
- <tt>\\alt{<i>alt1</i> \\asep <i>alt2</i> \\asep <i>alt3</i> ...}</tt>
  to typeset alternatives
- <tt>\\require{<i>number</i>}{<i>text</i>}</tt> to typeset
  <i>text</i> to show that it requires certain features of
  ESPResSo. <i>number</i> denotes the mark that is shown next to
  <i>text</i>. When this command is used, you also have to use the
  <tt>features</tt>-environment (see below) at the end of the \c
  essyntax environment, where all of the <i>number</i>s used are
  explained.
- The environment <tt>features</tt> to typeset which features are
  required by the Tcl-command. Each feature should be declared via the
  command <tt>\\required[<i>number</i>]{<i>feature</i>}</tt>, where
  the optional argument <i>number</i> is the number used above and
  <i>feature</i> is the feature in capital letters.

The <em>formal syntax definition</em> should be as simple and as
readable as possible, as it will be what a user references to. Avoid
very long definitions and constructs like nested alternatives and
options! In those cases, prefer to split the syntax definition into
several subdefinitions instead of writing it in a single, complicated
definition!

Example:
\verbatim
\begin{essyntax}
[clip]
\variant{5} constraint pore center \var{c_x} \var{c_y} \var{c_z} 
axis \var{n_x} \var{n_y} \var{n_z} radius \var{rad} length \var{length} type \var{id} 

\require{1}{%
  \variant{6} constraint rod center \var{c_x} \var{c_y} 
  lambda \var{lambda}
} 
  
\require{1}{%
  \variant{7} constraint plate height \var{h}
  sigma \var{sigma} 
}
  
\require{2,3}{%
  \variant{8} constraint ext_magn_field \var{f_x} \var{f_y} \var{f_z} 
}

  \begin{features}
  \required{CONSTRAINTS}
  \required[1]{ELECTROSTATICS}
  \required[2]{ROTATION}
  \required[3]{DIPOLES}
  \end{features}
\end{essyntax}
\endverbatim

\subsection command_desc Description

In the description, you should use all of the above typesetting
commands when you refer to them in the text.  In particular, every
variable argument introduced via the <tt>\\var</tt> command in the
definition has to be explained in detail: 
- state explicitly the \e type of the argument (integer, float,
  string, Tcl-list)        
- explain the meaning of the argument

If the command has a number of different options, i.e. independent,
optional arguments, they can be described in the \c arguments
environment:
\verbatim
\begin{arguments}
  \item[<arg1>] <description of arg1>
  \item[<arg2>] <description of arg2>
  ...
\end{arguments}
\endverbatim

The environment will generate the subheading \e Arguments and nicely
format the descriptions. 

Example: 
\verbatim \begin{arguments}
  \item[<short|verbose>]
  Specify, whether the output is in a human-readable, but somewhat
  longer format (\keyword{verbose}), or in a more compact form
  (\keyword{short}). The default is \keyword{verbose}.
  
  \item[<radius \var{radii}|auto>]
  Specify the VDW radii of the atoms. \var{radii} is either
  \keyword{auto}, or a Tcl-list describing the radii of the different
  ...
\end{arguments}
\endverbatim

*/
