/** \page ug Writing the User's Guide

\section Structure

  The User's Guide is written in LaTeX and contains the following
  parts:
  - Introduction: this chapter shall give the reader an overview
    over all of ESPResSo's algorithms and methods.
  - First steps: shall give a quick introduction on compiling and
      running ESPResSo, as well as on how to write a script.
  - Installation: shall explain the installation of ESPResSo in
      detail.
  - Setting up the system, Running the simulation, Analysis and
      Auxilliary commands: shall explain all of ESPResSo's
      Tcl-commands in detail.
  - Under the hood: shall explain the important internals of
      ESPResSo: parallelization, cell system, ...
  - Getting involved: where to find the DG, how to get started in
      using the C-code, where to report bugs, mailing list, etc.
  - ESPResSo quick reference: automatically generated list of all
      Tcl command syntax descriptions
  - Features: lists all features of ESPResSo
  - The rest of the chapters contain scientific descriptions of some
      of the employed algorithms that are not to be found anywhere
      else.

\section general General issues
  - Headings should start with a capital letter and continue with
      lower-case letters (<i>First steps</i> and <strong>not</strong>
      <i>First Steps</i>)

\section newcommands Additional environments and commands

  To maintain a consistent layout, a number of environments and
  commands have been defined that should be used where applicable. 
  - For the description of Tcl-commands, read \ref tclcommand.
  - The name of ESPResSo should be set via the command \c \\es.
  - The strings <em>i.e.</em>, <em>e.g.</em> and <em>et al.</em>
    should be set via \c \\ie, \c \\eg and \c \\etal.
  - For short code pieces that can be displayed inline, use 
\verbatim
\codebox{<text>}
\endverbatim
  - For longer code pieces or the syntax decription of non-Tcl
commands, the environment \c code exists:
\verbatim
\begin{code}
  ...
\end{code}
\endverbatim
    This is \e not a verbatim environment, i.e. it will evaluate
    LaTeX-commands inside. Therefore, it is necessary to be careful
    when using the characters \c \\,\c { and \c } inside! On the other
    hand, it is possible to use other layout commands (like \c
    \\textit) inside.
  - For pieces of Tcl-code that make extensive use of \c { and \c }, a
    verbatim environment \c tclcode exists:
\verbatim
\begin{tclcode}
 ...
\end{tclcode}
\endverbatim

\section tclcommand Documentation of Tcl commands

\subsection syntax_definition Formal syntax definition

\e All Tcl-commands have to be documented in the User's Guide.

At the beginning of each of the command descriptions, pleasue use the
command <tt>\\eslabel{\e commandname }</tt> to automatically generate a
label <tt>tcl:\e commandname</tt> and create appropriate index
entries.

For the <em>formal syntax definition</em>, you have to use the
environment \c essyntax. It will generate the headings
<em>Syntax</em>, <em>Required features</em> and <em>Description</em>,
and furthermore it will copy the syntax definition to the quick
reference guide. Inside the \c essyntax environment, you have to use
the following commands for typesetting the definition:

- <tt>\\variant{\e number }</tt> to typeset the label of a command
  variant
- <tt>\\var{\e name }</tt> to typeset a variable argument
- <tt>\\keyword{\e text }</tt> or <tt>\\lit{\e text }</tt> to
  typeset keywords or literals
- <tt>\\opt{\e text }</tt> to typeset optional arguments
- <tt>\<\e alt1 |\e alt2 |\e alt3 \></tt> to typeset alternatives
- <tt>\\requiresfeature[\e text]{\e features }</tt> will add a marking
  that the command requires the features \e features. If the optional
  argument \e text is used, it will be marked that \e text requires
  the feature, not the whole command.

The <em>formal syntax definition</em> should be as simple and as
readable as possible, as it will be what a user references to. Avoid
very long definitions and constructs like nested alternatives and
options! In those cases, prefer to split the syntax definition into
several subdefinitions instead of writing it in a single, complicated
definition!
    
Example:<p>
Instead of using
<p>
\c inter \< <em>particle_type_number1 particle_type_number2</em> |
<em>bond_type_number</em> \> <em>interaction_type</em> <em>value</em>+
<p>
better use
<p>
(1) \c inter <em>type1 type2 nb_inter_type parameters</em><br>
(2) \c inter <em>bond_type bond_inter_type parameters</em><br>

\subsection command_desc Description

In the description, you should use all of the above typesetting
commands when you refer to them in the text.  In particular, every
variable argument introduced via the <tt>\\var</tt> command in the
definition has to be explained in detail: 
- state explicitly the \e type of the argument (integer, float,
  string, Tcl-list)        
- explain the meaning of the argument

If the command has a number of different options, i.e. independent,
optional arguments, they can be described in the \c arguments
environment:
\verbatim
\begin{arguments}
  \item[<arg1>] <description of arg1>
  \item[<arg2>] <description of arg2>
  ...
\end{arguments}
\endverbatim

The environment will generate the subheading \e Arguments and nicely
format the descriptions. 

Example: 
\verbatim \begin{arguments}
  \item[<short|verbose>]
  Specify, whether the output is in a human-readable, but somewhat
  longer format (\keyword{verbose}), or in a more compact form
  (\keyword{short}). The default is \keyword{verbose}.
  
  \item[<radius \var{radii}|auto>]
  Specify the VDW radii of the atoms. \var{radii} is either
  \keyword{auto}, or a Tcl-list describing the radii of the different
  ...
\end{arguments}
\endverbatim

*/
