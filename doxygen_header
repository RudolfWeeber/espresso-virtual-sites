/** \mainpage

\section introduction Introduction

tcl_md is a MPI parallel molecular dynamics program. It uses a
<a href="http://tcl.activestate.com">Tcl</a> script for
controlling details of the simulation to allow great flexibility.
The standard Tcl language was extended by some commands which allow
to perform a complete MD simulation. Details on the additional Tcl commands
can be found \ref tcl "here".

The script is interpreted on only one node,
the master node. The other nodes wait for the master node to issue
specific actions, i. e. we utilize a client-server model. More details
can be found in \ref communication.h "communication.h". During the
actual integration however the communication is done synchronous.
For details see \ref integrate.c "integrate.c".

\section start Getting Started

<ol>
<li> Get your PEP membership.
<li> Add the following line to your .cshrc file.
\verbatim setenv CVSROOT ~pep/cvsroot  \endverbatim
<li> Get your local copy with:
\verbatim cvs checkout tcl_md \endverbatim
<li> Compile using 
\verbatim gmake \endverbatim
<li> Create actual documentation with (html, latex, man and rtf). This 
command works probably only on pckr27 (needs doxygen).
\verbatim gmake doc\endverbatim
(Use touch somefile.c if it does not work rightaway)
<li> Read the documentation carefully (Come on, there had been only 213 pages when I
was writing these lines) !!!
<li> Try the example script files: 
setup.tcl which sets up a new configuration using the ramp potential.
test.tcl Doing some MD on the new configuration. Try also the VMD
connection included (set use_imd y).
<li> Complain if you experience problems.
</ol>

\section restrictions Restrictions

<ul>
<li> The long range part is implemented for full periodicity, cubic
box and cubic mesh only. The program will probably crash if you mix up 
things here.
</ul>

\section bugs Bugs

!!! Don't use this code for sientific productions !!!\\
Their are probably plenty of bugs in the code at the moment, but they
are not known.

\section help More help about ...

<ul>
<li> \ref tcl
<li> \ref our_cvs
<li> \ref our_doxygen
</ul>

*/

/** \page tcl Using the Tcl Extension

The program tcl_md is an enhanced Tcl interpreter. Additionally to the standard commands
of Tcl it offers the following commands, which are implemented in C and provide the
interface between the Tcl script and the MD code:

<ul>
    <li>\anchor tcl_setmd \verbatim setmd <variable> <value>+ \endverbatim
	modifies variables declared in \ref fields. More information can be
	found in \ref variables_page. The C implementation is \ref setmd.
	Using \verbatim [setmd <variable>] \endverbatim gives the
	actual value of <variable> in the MD code back to the Tcl script.

<li>\anchor tcl_part
	\verbatim part <particle_number> ( pos|type|q|v|f|bond <value>+ )* \endverbatim
	modifies particle data, namely position, type (monomer, ion, ...),
		    charge, velocity, force and bonds. 
	Multiple properties can be changed at once. If you add a new
        particle the position has to be set first because of the spatial
        decomposition. <BR>
	Syntax for the different properties:
	<ul>
	<li> \verbatim pos <x value> <y value> <z value> \endverbatim
	<li> \verbatim type <particle_type_number> \endverbatim
	Restrictions: particle_type_number >= 0.<BR>
	The particle_type_number is used in \ref tcl_inter to define the
        parameters of the non bonded interactions between different kinds
        of particles.
	<li> \verbatim q <charge> \endverbatim
	<li> \verbatim v <x value> <y value> <z value> \endverbatim
	<li> \verbatim f <x value> <y value> <z value> \endverbatim
	<li> \verbatim bond <bond_type_number> <partner>+ \endverbatim
	Restrictions: bond_type_number >= 0; partner must be an	existing particle.<BR>
	The bond_type_number is used for \ref tcl_inter to define bonded interactions.
	</ul>
	If no property is given, 
	\verbatim part <particle_number> \endverbatim 
	returns the properties of the particle, if it exists, in the form
	\verbatim 0 pos 2.1 6.4 3.1 type 0 q -1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... } \endverbatim
	which may be used as an input to this function later on. The first integer is the
	particle number. <BR>
	\verbatim part number \endverbatim
	returns the real number of particles added so far.
	Without any parameters at all,
	\verbatim part \endverbatim
	returns the properties of <i> all </i> stored particles in a 
	tcl-list with the same format as specified above:
	\verbatim {0 pos 2.1 6.4 3.1 type 0 q -1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... }} {1 pos 1.0 2.0 3.0 type 0 q 1.0 v 0.0 0.0 0.0 f 0.0 0.0 0.0 bonds { {0 480} {0 368} ... }}
	\endverbatim
        The C implementation is \ref part. <BR>

<li> \anchor tcl_inter \verbatim inter ( <particle_type_number1> <particle_type_number2> | <bond_type_number> ) <interaction_type> <value>+ \endverbatim
	sets the parameters for interactions.

	<ol>
	<b><li> \anchor tcl_non_bonded Non bonded interactions:</b> 
	\verbatim inter <particle_type_number1> <particle_type_number2> <interaction_type> <value>+ \endverbatim	
	Non bonded interaction between particles of types
	particle_type_number1 and particle_type_number2
	(the types are those set using \ref tcl_part).<BR>
	Currently known interaction_types are:

	<ul>
	   	<li>\verbatim lennard-jones <epsilon> <sigma> <cutoff> <shift> <offset> \endverbatim
			the known Lennard-Jones potential
			\f[24 \epsilon \left(2 \left(\frac{\sigma}{r-offset}\right)^{12} -
				 \left(\frac{\sigma}{r-offset}\right)^6 + shift\right)\f]
			The order of the parameters is
			\f$\epsilon, \sigma, cutoff, shift, offset\f$.

		<li>\verbatim ramp <cutoff> <force_magnitude> \endverbatim
			a simple step potential for initialization.<BR>
			The parameters are the cutoff and the force
			magnitude. If two particles are within the
			cutoff, they feel a constant repulsion of the
			given magnitude.
	</ul>
	If no interaction_type is given,
	\verbatim inter <particle_type_number1> <particle_type_number2> \endverbatim
	returns the parameters of the currently active potentials for
	non-bonded interactions in the format
	\verbatim 0 1 lennard-jones 1.0 2.0 1.1225 0.0 0.0 \endverbatim
	which corresponds to the input-format of \ref tcl_inter.
	Again the first two integers are particle_type_number1 and particle_type_number2.

	<b> <li> \anchor tcl_bonded Bonded interactions: </b>
	\verbatim inter <bond_type_number> <interaction_type> <value>+ \endverbatim
	Bonded interaction (bonds are set using \ref tcl_part).
	Currently known interaction_types are:

	<ul>
		<li> \verbatim fene <K_fene> <R_fene> \endverbatim
			FENE potential
			\f[ U^{FENE} = -\frac{1}{2} K_{FENE} R_{FENE}^2 \ln
			\left( 1 - \left( \frac{r}{R_{FENE}} \right)^2 \right) \f]
		<li> \verbatim angle <bend> \endverbatim
			cosine bend potential  
			\f[ U^{bend} = bend (1-\cos(\alpha))
			\f]
			with \f$ \alpha \f$ being the angle between two
			neighboring bonds.
	</ul>
	If no interaction_type is given,
	\verbatim inter <bond_type_number> \endverbatim
	returns the parameters of the potential responsible for the
	bonded interactions of bonds with that bond_type_number in the format
	\verbatim 0 FENE 7.0 2.0 \endverbatim	
	which again directly corresponds to the input-format of the respective
	interaction with the first integer being bond_type_number.
	</ol>
	\verbatim inter \endverbatim
	returns a list of \emph{all} bonded and non-bonded interactions as a Tcl-list,
	in the same formats as above, e. g.
	\verbatim {0 0 lennard-jones 1.0 2.0 1.1225 0.0 0.0} {0 FENE 7.0 2.0} {1 angle 1.0}\endverbatim	
	The C implementation is \ref inter.

<li>\anchor tcl_writemd
	\verbatim writemd <channel> ( posx|posy|posz|q|type|vx|vy|vz|fx|fy|z )+\endverbatim

	writes to the channel <channel> (previously opened using the Tcl commands open or
	socket) the given properties for all particles in a binary format decribed by
	\ref binary_file.h "binary_file.h". Note that the data format is written in hardware
	dependend format. Especially files written on AIX cannot be read by Linux or Tru64
	computers. This command is only meant to be used for restart checkpoints, NOT for
	permanent data storage. The C implementation is \ref writemd.

<li>\verbatim readmd <channel>\endverbatim
	reads back data written by \ref tcl_writemd.
	The components posx, posy and posz must be included since otherwise
	domain decomposition is impossible.
	The C implementation is \ref readmd.

<li>\verbatim integrate init|<steps>|exit \endverbatim
	init starts a new simulation, exit stops it, else the simulation will run for
	<steps> steps. 
	The C implementation is \ref integrate.
</ul>
*/

/** \page our_cvs How to use CVS

<b>Befor checking in any changes you should make sure that</b>
<ol>
<li> your file contains no conflicts with the cvs version.
<li> the code compiles without warning on Linux and OSF1.
<li> the \ref maketest "test procedure" runs. 
<li> you have informed the responsible person of that file about major
changes.
</ol>

Here a list of the most commen cvs commands we need:

<ul>
<li> \anchor cvs_add \verbatim cvs add <file> \endverbatim
	Adds <file> to the cvsroot directory. You have to use 
	\ref cvs_commit "commit" to make your add complete. 
<li> \anchor cvs_checkout \verbatim cvs checkout <project> \endverbatim
	This will create a new directory <project> in the CWD, containing an
	up-to-date version of <project>.
<li> \anchor cvs_commit \verbatim cvs commit <file> \endverbatim
	Puts your changes into the cvsroot directory and makes them
	available for the others. 
	<b> Use with care and write a senseful comment !!!</b>
<li> \anchor cvs_diff \verbatim cvs diff <file> \endverbatim
	Shows differences of your local copy of <file> with respect
	to the cvs version.	
<li> \anchor cvs_log \verbatim cvs log <file> \endverbatim
	Shows the log file for <file>, e.g. comments on changes that
	have been made in the past and who is responsible for them.
<li> \anchor cvs_remove \verbatim cvs remove <file> \endverbatim
	removes a file from the cvsroot directory. That means, it is
	still there and can be restored, but will not be contained in
	futere checkouts and updates. <b>Use with care !!! </b>
<li> \anchor cvs_status \verbatim cvs status <file> \endverbatim
	Reports the status of your local copy of <file> with respect
	to the cvs version.	
<li> \anchor cvs_update \verbatim cvs update \endverbatim
	Get the current version of all files from the cvsroot
	directory. There will be a U in front of files that are
	updated, a M before files where cvs merges your local copy
	with the cvs version and a ? if there are files in your local
	directory which are not known to cvs. You will get a warning 
	\verbatim conflicts during merge \endverbatim for files where
	cvs is not able to merge. <b>You have to look at these files
	by hand!</b> They contain sections
	\verbatim 
>>>>>>>>
Version of this section from 
the cvsroot directory
========
Version of this section from
your local copy
<<<<<<<<
	\endverbatim
	You have to <b>think first</b> and then decide how to combine
	the two versions.
</ul>

For more help on CVS, see 
<a href="http://www.mpip-mainz.mpg.de/www/theory/computers/pdsoftie/doc/cvs/cvs_toc.html">CVS Manual</a>
*/

/** \page our_doxygen How to do the documentation (Doxygen)

The documentation for tcl_md is mainly contained in the source code
and is automatically generated using doxygen.
<p>
For each modul the documentation of the user interface, this are
public funtions and external variable, should be in the header
file. All other documentation should be in the c-file.
<p>
The documentation for each function should contain a short
description, if necessary a more detailed description and a
description for the return value and parameters.
<p>
Look at the documentation of existing files and functions to get a
feeling how it should be!
<p>
Doxygen is able to understand simple LaTex and HTML commands as well
as some special command in order to give the documentation a nice
structure and to make it more readable. In the following list you find 
a short description of the most common commands we need:

<ul>
<li> \anchor doc_anchor   \verbatim \anchor <name> <description>\endverbatim
	Set an anchor to which you can refer using \ref doc_ref "\ref"
<li> \anchor doc_href     \verbatim <a href="http://www.your_url.html"> name </a>\endverbatim
	Link to an external html source.
<li> \anchor doc_file     \verbatim \file <name> <description>\endverbatim
	Special anchor for a file (see \ref doc_anchor "\anchor").
<li> \anchor doc_image    \verbatim \image html  doc/figs/fig.gif \endverbatim
                          \verbatim \image latex doc/figs/fig.eps \endverbatim
	Include a picture. You have to put both lines in the
	documentation since HTML and LaTex need different file formats.
<li> \anchor doc_list     \verbatim 
<ul>
<li> List entry
</ul>
\endverbatim
	Creates a list in the documentation (For example the list you
	are reading at the moment).
<li> \anchor doc_name     \verbatim 
/** \name <group_name> <short description>.
    <long_description>
*/
/*@{*/ 
<group members>
...
/*@}*/ 
\endverbatim
	Introduces a group to which one can refer with 
	\ref doc_ref "\ref". The documentation of the group members
	must be inside the \@{ ... \@} comments.
<li> \anchor doc_param    \verbatim \param <parameter> <description> \endverbatim
	Documentation for a parameter of a function
<li> \anchor doc_ref      \verbatim \ref <name> ["<text>"] \endverbatim
	Inserts a link to the documentation of <name>.
<li> \anchor doc_return   \verbatim \return <description>\endverbatim
	Documentation for the return value of a function
<li> \anchor doc_todo     \verbatim \todo <task to be done> \endverbatim
	Starts a paragraph where a TODO item is described. The
	description will also add an item to a separate TODO list. The
	two instances of the description will be
	cross-referenced. Each item in the TODO list will be preceded
	by a header that indicates the origin of the item. The TODO
	list can be found under [Related Pages] 
</ul>

*/
