#  This file is part of the ESPResSo distribution (http://www.espresso.mpg.de).
#  It is therefore subject to the ESPResSo license agreement which you accepted upon receiving the distribution
#  and by which you are legally bound while utilizing this file in any form or way.
#  There is NO WARRANTY, not even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  You should have received a copy of that license along with this program;
#  if not, refer to http://www.espresso.mpg.de/license.html where its current version can be found, or
#  write to Max-Planck-Institute for Polymer Research, Theory Group, PO Box 3148, 55021 Mainz, Germany.
#  Copyright (c) 2002-2004; all rights reserved unless otherwise stated.
# 
############ general settings

### Tk (graphical interface)
TK=no

### Intel C compiler instead of gcc
ICC=no

### Enable ('yes') for the Blade-Center (see http://www.mpip-mainz.mpg.de/theory/computers/blade/index.html)
### This also enables the ICC-flag by default (since there is no 'gcc' on the Blade-Center).
BLADE=no

### Use the 'mpich' implementation of MPI instead of the default 'lam' one.
### This overrides the ICC-flag for obvious reasons.
### This is overridden by the BLADE-flag (since there is no 'lam' on the Blade-Center).
### Note that you'll need a link to the 'mpich'-implemented 'mpirun' in /opt/mpich/ch-p4/bin/mpirun
###      to execute the resulting binary (the default 'mpirun' is currently /opt/lam/bin/mpirun).
MPICH=no

### use a simple fake MPI implementation for single node use only
MPIFAKE=no

### which version of fftw to use, default is use fftw2
USEFFTW3=no

### static compilation for certain brain damaged blade clusters
STATIC=no

### Debug compiling
DEBUG=no

### Profiling compiling
PROFIL=no

### ElectricFence allocation debugging
EFENCE=no

### host optimization. Leave blank for automatic setting
HOSTFLAGS=



############ compiler settings
# you only have to define this if the automagic below
# does not work for you
CC=

ifeq ($(CC),)
CC=mpicc
ifeq ($(BLADE),yes)
     CC=mpicci
     ICC=yes
else
     ifeq ($(ICC),yes)
          CC=icc
     endif
     ifeq ($(MPICH),yes)
          CC=/opt/mpich/ch-p4/bin/mpicc
	  CC=$$ESPRESSO_SOURCE/internal/mpicc.modf
	  ICC=no
     else
	  ifeq ($(MPIFAKE),yes)
                ifeq ($(ICC),yes)
			CC=icc
		else
			CC=gcc
		endif
          endif
     endif
endif
endif

# architecture dependent flags for gcc 3
MODEL=$(shell awk '/\`model name/ { \
	if ($$4 == "Pentium") print $$4"-"$$5; else \
	if ($$4 == "Intel(R)" && $$5 == "Pentium(R)") print "Pentium-"$$6; else \
	if ($$4 == "AMD" && $$5 == "Athlon(TM)") print "Athlon-"$$6; else \
	if ($$4 == "AMD" && $$5 == "Athlon(tm)") print "Athlon-"$$6; else \
	if ($$4 == "AMD" && $$5 == "Opteron(tm)") print "Opteron"; else \
	print "Generic"; \
	exit }' \/proc/cpuinfo)

ifeq ($(ICC),yes)
     ifeq ($(BLADE),yes)
# activate optimization for Blade-Xeon-Procs (see http://www.rzg.mpg.de/docs/languages/Intel_cc.html)
          HOSTFLAGS=-tpp7 -axW -xW -march=pentium4 -I. -I/afs/ipp/@sys/soft/fftw/f95i/include
     else
          ifeq ($(MODEL),Athlon-MP)
               HOSTFLAGS= -tpp6 -xK -march=pentiumiii
          endif

          ifeq ($(MODEL),Pentium-M)
               HOSTFLAGS= -tpp7 -xB
          endif
     endif

     CFLAGS=-O3 -ip -w1 $(HOSTFLAGS)

     # debug compiler flags
     ifeq ($(DEBUG),yes)
          CFLAGS += -g -fno-inline
     endif
else
# gcc optimization
     ifeq ($(HOSTFLAGS),)
          HOSTFLAGS=-march=i386

          ifeq ($(MODEL),Pentium-M)
               HOSTFLAGS= -malign-double -march=pentium4 -mfpmath=sse -msse2
          endif

          ifeq ($(MODEL),Pentium-III)
               HOSTFLAGS= -malign-double -march=pentium3 -mfpmath=sse -msse
          endif

          ifeq ($(MODEL),Athlon-MP)
               HOSTFLAGS= -malign-double -march=athlon-mp -mfpmath=sse -msse
          endif

          ifeq ($(MODEL),Athlon-XP)
               HOSTFLAGS= -malign-double -march=athlon-xp -mfpmath=sse -msse
          endif

          ifeq ($(MODEL),Athlon-64)
               HOSTFLAGS= -m64 -mfpmath=sse -msse2
          endif

          ifeq ($(MODEL),Opteron)
               HOSTFLAGS= -m64 -mfpmath=sse -msse2
          endif

          ifeq ($(MODEL),Athlon-Processor)
               HOSTFLAGS= -malign-double -march=athlon -mfpmath=sse -msse
          endif
     endif

     CFLAGS=-O3 -Wall $(HOSTFLAGS) -finline-limit=10000000 \
	    -ffast-math -floop-optimize -funroll-loops

     # debug compiler flags
     ifeq ($(DEBUG),yes)
          CFLAGS= -g -fno-inline -Wall $(HOSTFLAGS)
     endif
endif


############ name of makedepend (or gcc -ME)
DEPEND=makedepend

############ C++ compiler settings
CXX=g++

############ MDINLINE defines how to declare inline functions
ifeq ($(MPICH),yes)
     CFLAGS+= "-DMDINLINE=\"inline static\""
else
     CFLAGS+= -DMDINLINE="inline static"
endif

############ fake mpi
ifeq ($(MPIFAKE),yes)
	CSOURCES += mpi
	CFLAGS += -I.
endif

############ linker settings
LINK=$(CC)
LDLIBS= -lm -lpthread

ifeq ($(STATIC),yes)
	LDFLAGS+=-static
	STATIC_POSTLOAD=-lm -ldl
endif
ifeq ($(ICC),yes)
     # in Blade-Center, include optimized math-libraries (see http://dbforums.com/t564728.html)
     LDLIBS+=-L/usr/local/lib/intel/lib -lsvml
endif

########### ElectricFence
ifeq ($(EFENCE),yes)
     LDLIBS+= -lefence
     CFLAGS+= -DEFENCE
endif

########### FFTW
ifeq ($(USEFFTW3),yes)
     CFLAGS+= -DUSEFFTW3
     ifeq ($(BLADE),yes)
          LDLIBS+= -L/afs/ipp/@sys/soft/fftw/f95i/lib -lfftw3
     else
          LDLIBS+= -L/usr/local/lib -lfftw3
     endif
else
     ifeq ($(BLADE),yes)
           LDLIBS+= -L/afs/ipp/@sys/soft/fftw/f95i/lib -lrfftw -lfftw
     else
           LDLIBS+= -L/usr/local/lib -ldrfftw -ldfftw
     endif
endif

########### TCL
CFLAGS+= -DUSE_NON_CONST
ifeq ($(BLADE),yes)
     LDLIBS+= -L/afs/ipp/@sys/soft/gnu/lib -ltcl8.4
else
     LDLIBS+= -ltcl8.4
endif

########### TK
ifeq ($(TK),yes)
     CFLAGS+= -DTK
     LDLIBS+= -ltk8.4
endif

########### LAM/MPI
ifeq ($(ICC),yes)
     ifeq ($(BLADE),yes)
     else
          ifeq ($(MPICH),yes)
	       CFLAGS+= -I/opt/mpich/ch-p4/include
	       LDLIBS+= -L/opt/mpich/ch-p4/lib64 -lmpich
	  else
	       ifeq ($(MPIFAKE),yes)
                     # no mpi flags at all
	       else
	             CFLAGS+= -I/opt/lam/include
	             LDLIBS+= -L/opt/lam/lib -lmpi -llam
               endif
	  endif
     endif
endif

############ add profiling flags
ifeq ($(PROFIL),yes)
     CFLAGS+= -pg
     LDFLAGS+= -pg
endif


############# special flags for C++ compilation
CXXFLAGS=$(CFLAGS) -felide-constructors -fomit-frame-pointer -fno-rtti
